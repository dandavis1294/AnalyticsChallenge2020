<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20202.20.0614.2338                               -->
<workbook original-version='18.1' source-build='2020.2.2 (20202.20.0614.2338)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='AnalyticsChallenge2020Data' inline='true' name='federated.0fg5f9510yktd81eigu1o10xko06' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='AnalyticsChallenge2020Data' name='textscan.06uq2mo0s1q9ch15p9hxc0rsslmq'>
            <connection class='textscan' directory='C:/Users/titansfreak12/Documents' filename='AnalyticsChallenge2020Data.txt' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.06uq2mo0s1q9ch15p9hxc0rsslmq' name='AnalyticsChallenge2020Data.txt' table='[AnalyticsChallenge2020Data#txt]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='GameID' ordinal='0' />
            <column datatype='integer' name='EventID' ordinal='1' />
            <column datatype='integer' name='Season' ordinal='2' />
            <column datatype='integer' name='Week' ordinal='3' />
            <column datatype='string' name='StadiumName' ordinal='4' />
            <column datatype='string' name='OffensiveTeam' ordinal='5' />
            <column datatype='string' name='DefensiveTeam' ordinal='6' />
            <column datatype='integer' name='OffTeamScoreBefore' ordinal='7' />
            <column datatype='integer' name='DefTeamScoreBefore' ordinal='8' />
            <column datatype='integer' name='Quarter' ordinal='9' />
            <column datatype='integer' name='TimeLeft' ordinal='10' />
            <column datatype='integer' name='Down' ordinal='11' />
            <column datatype='integer' name='ToGo' ordinal='12' />
            <column datatype='string' name='SideOfField' ordinal='13' />
            <column datatype='integer' name='StartYard' ordinal='14' />
            <column datatype='string' name='EventType' ordinal='15' />
            <column datatype='integer' name='FirstDown' ordinal='16' />
            <column datatype='integer' name='Touchdown' ordinal='17' />
            <column datatype='integer' name='Safety' ordinal='18' />
            <column datatype='integer' name='Turnover' ordinal='19' />
            <column datatype='string' name='RunDirection' ordinal='20' />
            <column datatype='integer' name='UsedDesignedGap' ordinal='21' />
            <column datatype='integer' name='Attempt' ordinal='22' />
            <column datatype='integer' name='Completion' ordinal='23' />
            <column datatype='integer' name='Spike' ordinal='24' />
            <column datatype='integer' name='ThrowDepth' ordinal='25' />
            <column datatype='integer' name='PressureOnPlay' ordinal='26' />
            <column datatype='integer' name='SackOnPlay' ordinal='27' />
            <column datatype='integer' name='PassBreakupOnPlay' ordinal='28' />
            <column datatype='integer' name='InterceptionOnPlay' ordinal='29' />
            <column datatype='integer' name='FumbleByPasser' ordinal='30' />
            <column datatype='integer' name='FumbleByRusher' ordinal='31' />
            <column datatype='integer' name='FumbleByReceiver' ordinal='32' />
            <column datatype='integer' name='OffensiveYardage' ordinal='33' />
            <column datatype='real' name='EPA' ordinal='34' />
            <column datatype='string' name='PlayDesc' ordinal='35' />
            <column datatype='integer' name='PlayerId' ordinal='36' />
            <column datatype='string' name='Name' ordinal='37' />
            <column datatype='string' name='RosterPosition' ordinal='38' />
            <column datatype='string' name='OnFieldPosition' ordinal='39' />
            <column datatype='string' name='SideOfBall' ordinal='40' />
            <column datatype='string' name='TechniqueName' ordinal='41' />
            <column datatype='integer' name='IsRushing' ordinal='42' />
            <column datatype='integer' name='SoloTackle' ordinal='43' />
            <column datatype='integer' name='AssistedTackle' ordinal='44' />
            <column datatype='integer' name='Pressure' ordinal='45' />
            <column datatype='integer' name='SoloSack' ordinal='46' />
            <column datatype='integer' name='AssistedSack' ordinal='47' />
            <column datatype='integer' name='PassBreakup' ordinal='48' />
            <column datatype='integer' name='Interception' ordinal='49' />
            <column datatype='integer' name='ForcedFumble' ordinal='50' />
            <column datatype='integer' name='RecoveredFumble' ordinal='51' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.06uq2mo0s1q9ch15p9hxc0rsslmq' name='AnalyticsChallenge2020Data.txt' table='[AnalyticsChallenge2020Data#txt]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='GameID' ordinal='0' />
            <column datatype='integer' name='EventID' ordinal='1' />
            <column datatype='integer' name='Season' ordinal='2' />
            <column datatype='integer' name='Week' ordinal='3' />
            <column datatype='string' name='StadiumName' ordinal='4' />
            <column datatype='string' name='OffensiveTeam' ordinal='5' />
            <column datatype='string' name='DefensiveTeam' ordinal='6' />
            <column datatype='integer' name='OffTeamScoreBefore' ordinal='7' />
            <column datatype='integer' name='DefTeamScoreBefore' ordinal='8' />
            <column datatype='integer' name='Quarter' ordinal='9' />
            <column datatype='integer' name='TimeLeft' ordinal='10' />
            <column datatype='integer' name='Down' ordinal='11' />
            <column datatype='integer' name='ToGo' ordinal='12' />
            <column datatype='string' name='SideOfField' ordinal='13' />
            <column datatype='integer' name='StartYard' ordinal='14' />
            <column datatype='string' name='EventType' ordinal='15' />
            <column datatype='integer' name='FirstDown' ordinal='16' />
            <column datatype='integer' name='Touchdown' ordinal='17' />
            <column datatype='integer' name='Safety' ordinal='18' />
            <column datatype='integer' name='Turnover' ordinal='19' />
            <column datatype='string' name='RunDirection' ordinal='20' />
            <column datatype='integer' name='UsedDesignedGap' ordinal='21' />
            <column datatype='integer' name='Attempt' ordinal='22' />
            <column datatype='integer' name='Completion' ordinal='23' />
            <column datatype='integer' name='Spike' ordinal='24' />
            <column datatype='integer' name='ThrowDepth' ordinal='25' />
            <column datatype='integer' name='PressureOnPlay' ordinal='26' />
            <column datatype='integer' name='SackOnPlay' ordinal='27' />
            <column datatype='integer' name='PassBreakupOnPlay' ordinal='28' />
            <column datatype='integer' name='InterceptionOnPlay' ordinal='29' />
            <column datatype='integer' name='FumbleByPasser' ordinal='30' />
            <column datatype='integer' name='FumbleByRusher' ordinal='31' />
            <column datatype='integer' name='FumbleByReceiver' ordinal='32' />
            <column datatype='integer' name='OffensiveYardage' ordinal='33' />
            <column datatype='real' name='EPA' ordinal='34' />
            <column datatype='string' name='PlayDesc' ordinal='35' />
            <column datatype='integer' name='PlayerId' ordinal='36' />
            <column datatype='string' name='Name' ordinal='37' />
            <column datatype='string' name='RosterPosition' ordinal='38' />
            <column datatype='string' name='OnFieldPosition' ordinal='39' />
            <column datatype='string' name='SideOfBall' ordinal='40' />
            <column datatype='string' name='TechniqueName' ordinal='41' />
            <column datatype='integer' name='IsRushing' ordinal='42' />
            <column datatype='integer' name='SoloTackle' ordinal='43' />
            <column datatype='integer' name='AssistedTackle' ordinal='44' />
            <column datatype='integer' name='Pressure' ordinal='45' />
            <column datatype='integer' name='SoloSack' ordinal='46' />
            <column datatype='integer' name='AssistedSack' ordinal='47' />
            <column datatype='integer' name='PassBreakup' ordinal='48' />
            <column datatype='integer' name='Interception' ordinal='49' />
            <column datatype='integer' name='ForcedFumble' ordinal='50' />
            <column datatype='integer' name='RecoveredFumble' ordinal='51' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GameID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[GameID]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>GameID</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EventID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[EventID]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>EventID</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Season</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Season]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Season</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Week</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Week]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Week</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>StadiumName</remote-name>
            <remote-type>129</remote-type>
            <local-name>[StadiumName]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>StadiumName</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OffensiveTeam</remote-name>
            <remote-type>129</remote-type>
            <local-name>[OffensiveTeam]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>OffensiveTeam</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DefensiveTeam</remote-name>
            <remote-type>129</remote-type>
            <local-name>[DefensiveTeam]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>DefensiveTeam</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OffTeamScoreBefore</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OffTeamScoreBefore]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>OffTeamScoreBefore</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DefTeamScoreBefore</remote-name>
            <remote-type>20</remote-type>
            <local-name>[DefTeamScoreBefore]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>DefTeamScoreBefore</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Quarter</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Quarter]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Quarter</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TimeLeft</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TimeLeft]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>TimeLeft</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Down</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Down]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Down</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ToGo</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ToGo]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>ToGo</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SideOfField</remote-name>
            <remote-type>129</remote-type>
            <local-name>[SideOfField]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>SideOfField</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>StartYard</remote-name>
            <remote-type>20</remote-type>
            <local-name>[StartYard]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>StartYard</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EventType</remote-name>
            <remote-type>129</remote-type>
            <local-name>[EventType]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>EventType</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FirstDown</remote-name>
            <remote-type>20</remote-type>
            <local-name>[FirstDown]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>FirstDown</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Touchdown</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Touchdown]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Touchdown</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Safety</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Safety]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Safety</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Turnover</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Turnover]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Turnover</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RunDirection</remote-name>
            <remote-type>129</remote-type>
            <local-name>[RunDirection]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>RunDirection</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>UsedDesignedGap</remote-name>
            <remote-type>20</remote-type>
            <local-name>[UsedDesignedGap]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>UsedDesignedGap</remote-alias>
            <ordinal>21</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Attempt</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Attempt]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Attempt</remote-alias>
            <ordinal>22</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Completion</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Completion]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Completion</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Spike</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Spike]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Spike</remote-alias>
            <ordinal>24</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ThrowDepth</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ThrowDepth]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>ThrowDepth</remote-alias>
            <ordinal>25</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PressureOnPlay</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PressureOnPlay]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>PressureOnPlay</remote-alias>
            <ordinal>26</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SackOnPlay</remote-name>
            <remote-type>20</remote-type>
            <local-name>[SackOnPlay]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>SackOnPlay</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PassBreakupOnPlay</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PassBreakupOnPlay]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>PassBreakupOnPlay</remote-alias>
            <ordinal>28</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InterceptionOnPlay</remote-name>
            <remote-type>20</remote-type>
            <local-name>[InterceptionOnPlay]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>InterceptionOnPlay</remote-alias>
            <ordinal>29</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FumbleByPasser</remote-name>
            <remote-type>20</remote-type>
            <local-name>[FumbleByPasser]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>FumbleByPasser</remote-alias>
            <ordinal>30</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FumbleByRusher</remote-name>
            <remote-type>20</remote-type>
            <local-name>[FumbleByRusher]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>FumbleByRusher</remote-alias>
            <ordinal>31</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FumbleByReceiver</remote-name>
            <remote-type>20</remote-type>
            <local-name>[FumbleByReceiver]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>FumbleByReceiver</remote-alias>
            <ordinal>32</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OffensiveYardage</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OffensiveYardage]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>OffensiveYardage</remote-alias>
            <ordinal>33</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EPA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EPA]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>EPA</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PlayDesc</remote-name>
            <remote-type>129</remote-type>
            <local-name>[PlayDesc]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>PlayDesc</remote-alias>
            <ordinal>35</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PlayerId</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PlayerId]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>PlayerId</remote-alias>
            <ordinal>36</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Name]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Name</remote-alias>
            <ordinal>37</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RosterPosition</remote-name>
            <remote-type>129</remote-type>
            <local-name>[RosterPosition]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>RosterPosition</remote-alias>
            <ordinal>38</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OnFieldPosition</remote-name>
            <remote-type>129</remote-type>
            <local-name>[OnFieldPosition]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>OnFieldPosition</remote-alias>
            <ordinal>39</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SideOfBall</remote-name>
            <remote-type>129</remote-type>
            <local-name>[SideOfBall]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>SideOfBall</remote-alias>
            <ordinal>40</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TechniqueName</remote-name>
            <remote-type>129</remote-type>
            <local-name>[TechniqueName]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>TechniqueName</remote-alias>
            <ordinal>41</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IsRushing</remote-name>
            <remote-type>20</remote-type>
            <local-name>[IsRushing]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>IsRushing</remote-alias>
            <ordinal>42</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SoloTackle</remote-name>
            <remote-type>20</remote-type>
            <local-name>[SoloTackle]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>SoloTackle</remote-alias>
            <ordinal>43</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AssistedTackle</remote-name>
            <remote-type>20</remote-type>
            <local-name>[AssistedTackle]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>AssistedTackle</remote-alias>
            <ordinal>44</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pressure</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Pressure]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Pressure</remote-alias>
            <ordinal>45</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SoloSack</remote-name>
            <remote-type>20</remote-type>
            <local-name>[SoloSack]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>SoloSack</remote-alias>
            <ordinal>46</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AssistedSack</remote-name>
            <remote-type>20</remote-type>
            <local-name>[AssistedSack]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>AssistedSack</remote-alias>
            <ordinal>47</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PassBreakup</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PassBreakup]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>PassBreakup</remote-alias>
            <ordinal>48</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Interception</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Interception]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>Interception</remote-alias>
            <ordinal>49</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ForcedFumble</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ForcedFumble]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>ForcedFumble</remote-alias>
            <ordinal>50</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RecoveredFumble</remote-name>
            <remote-type>20</remote-type>
            <local-name>[RecoveredFumble]</local-name>
            <parent-name>[AnalyticsChallenge2020Data.txt]</parent-name>
            <remote-alias>RecoveredFumble</remote-alias>
            <ordinal>51</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Assisted Sack' datatype='integer' name='[AssistedSack]' role='measure' type='quantitative' />
      <column caption='Assisted Tackle' datatype='integer' name='[AssistedTackle]' role='measure' type='quantitative' />
      <column caption='Percentage' datatype='real' default-format='p0.00%' name='[Calculation1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT([TechniqueName]) / TOTAL(COUNT([TechniqueName]))'>
          <table-calc ordering-type='RowInPane' />
        </calculation>
      </column>
      <column caption='Total Tackles' datatype='integer' name='[Calculation_350154876225814532]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[AssistedTackle]+[SoloTackle]' />
      </column>
      <column caption='[Assisted Tackle]+[Solo Tackle] (1)' datatype='integer' name='[Calculation_350154876243222535]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[AssistedTackle]+[SoloTackle]' />
      </column>
      <column caption='[Assisted Tackle]+[Solo Tackle]' datatype='integer' name='[Calculation_350154876243275785]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[AssistedTackle]+[SoloTackle]' />
      </column>
      <column caption='Sacks as % of Snaps' datatype='real' name='[Calculation_350154876284645427]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Name]:SUM([SoloSack]+[AssistedSack])/COUNT([EventID])}' />
      </column>
      <column caption='Total Sacks' datatype='integer' name='[Calculation_350154876284969014]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([SoloSack]+[AssistedSack])' />
      </column>
      <column caption='EPA per Snap' datatype='real' name='[Calculation_350154876598411339]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM(EPA)/count([EventID])' />
      </column>
      <column caption='Def Team Score Before' datatype='integer' name='[DefTeamScoreBefore]' role='measure' type='quantitative' />
      <column caption='Defensive Team' datatype='string' name='[DefensiveTeam]' role='dimension' type='nominal' />
      <column datatype='real' name='[EPA]' role='measure' type='quantitative' />
      <column caption='Event ID' datatype='integer' name='[EventID]' role='dimension' type='ordinal' />
      <column caption='Event Type' datatype='string' name='[EventType]' role='dimension' type='nominal' />
      <column caption='First Down' datatype='integer' name='[FirstDown]' role='measure' type='quantitative' />
      <column caption='Forced Fumble' datatype='integer' name='[ForcedFumble]' role='measure' type='quantitative' />
      <column caption='Fumble By Passer' datatype='integer' name='[FumbleByPasser]' role='measure' type='quantitative' />
      <column caption='Fumble By Receiver' datatype='integer' name='[FumbleByReceiver]' role='measure' type='quantitative' />
      <column caption='Fumble By Rusher' datatype='integer' name='[FumbleByRusher]' role='measure' type='quantitative' />
      <column caption='Game ID' datatype='integer' name='[GameID]' role='dimension' type='ordinal' />
      <column caption='Interception On Play' datatype='integer' name='[InterceptionOnPlay]' role='measure' type='quantitative' />
      <column caption='Is Rushing' datatype='integer' name='[IsRushing]' role='measure' type='quantitative' />
      <column datatype='string' name='[Name]' role='dimension' type='nominal' />
      <column caption='Off Team Score Before' datatype='integer' name='[OffTeamScoreBefore]' role='measure' type='quantitative' />
      <column caption='Offensive Team' datatype='string' name='[OffensiveTeam]' role='dimension' type='nominal' />
      <column caption='Offensive Yardage' datatype='integer' name='[OffensiveYardage]' role='measure' type='quantitative' />
      <column caption='On Field Position' datatype='string' name='[OnFieldPosition]' role='dimension' type='nominal' />
      <column caption='Pass Breakup On Play' datatype='integer' name='[PassBreakupOnPlay]' role='measure' type='quantitative' />
      <column caption='Pass Breakup' datatype='integer' name='[PassBreakup]' role='measure' type='quantitative' />
      <column caption='Play Desc' datatype='string' name='[PlayDesc]' role='dimension' type='nominal' />
      <column caption='Player Id' datatype='integer' name='[PlayerId]' role='dimension' type='ordinal' />
      <column caption='Pressure On Play' datatype='integer' name='[PressureOnPlay]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Pressure]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Quarter]' role='dimension' type='quantitative' />
      <column caption='Recovered Fumble' datatype='integer' name='[RecoveredFumble]' role='measure' type='quantitative' />
      <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
      <column caption='Run Direction' datatype='string' name='[RunDirection]' role='dimension' type='nominal' />
      <column caption='Sack On Play' datatype='integer' name='[SackOnPlay]' role='measure' type='quantitative' />
      <column caption='Sacks as % of Snaps (copy)' datatype='real' name='[Sacks as % of Snaps (copy)_350154876287922231]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='{ FIXED [Name]:SUM([SoloSack]+[AssistedSack])/COUNT([EventID])}' />
      </column>
      <column caption='Side Of Ball' datatype='string' name='[SideOfBall]' role='dimension' type='nominal' />
      <column caption='Side Of Field' datatype='string' name='[SideOfField]' role='dimension' type='nominal' />
      <column caption='Solo Sack' datatype='integer' name='[SoloSack]' role='measure' type='quantitative' />
      <column caption='Solo Tackle' datatype='integer' name='[SoloTackle]' role='measure' type='quantitative' />
      <column caption='Stadium Name' datatype='string' name='[StadiumName]' role='dimension' type='nominal' />
      <column caption='Start Yard' datatype='integer' name='[StartYard]' role='measure' type='quantitative' />
      <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
      <column caption='Throw Depth' datatype='integer' name='[ThrowDepth]' role='measure' type='quantitative' />
      <column caption='Time Left' datatype='integer' name='[TimeLeft]' role='measure' type='quantitative' />
      <column caption='To Go' datatype='integer' name='[ToGo]' role='measure' type='quantitative' />
      <column caption='Used Designed Gap' datatype='integer' name='[UsedDesignedGap]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Week]' role='dimension' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='AnalyticsChallenge2020Data.txt' datatype='table' name='[__tableau_internal_object_id__].[AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4]' role='measure' type='quantitative' />
      <column-instance column='[EPA]' derivation='Attribute' name='[attr:EPA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EPA]' derivation='Avg' name='[avg:EPA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EPA]' derivation='Max' name='[max:EPA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EPA]' derivation='Min' name='[min:EPA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EPA]' derivation='Min' name='[min:EPA:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
      <column-instance column='[EPA]' derivation='None' name='[none:EPA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
      <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
      <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
      <column-instance column='[AssistedTackle]' derivation='Sum' name='[sum:AssistedTackle:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EPA]' derivation='Sum' name='[sum:EPA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EPA]' derivation='Sum' name='[sum:EPA:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
      <column-instance column='[Pressure]' derivation='Sum' name='[sum:Pressure:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PressureOnPlay]' derivation='Sum' name='[sum:PressureOnPlay:qk]' pivot='key' type='quantitative' />
      <column-instance column='[SoloTackle]' derivation='Sum' name='[sum:SoloTackle:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_350154876284969014]' derivation='User' name='[usr:Calculation_350154876284969014:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_350154876598411339]' derivation='User' name='[usr:Calculation_350154876598411339:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_350154876598411339]' derivation='User' name='[usr:Calculation_350154876598411339:vtmin:qk]' pivot='key' type='quantitative' visual-totals='Min' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:RosterPosition:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;DE&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;FB&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;CB&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;T&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;LB&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;S&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;DT&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;WR&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[sum:AssistedTackle:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313276473:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313403450:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313448507:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313473084:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313501757:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[usr:Calculation_350154876284969014:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[usr:Calculation_350154876313616446:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Pressure:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[attr:EPA:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[avg:EPA:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[max:Calculation_350154876598341706:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[max:EPA:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:vtsum:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[none:EPA:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:vtsum:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[usr:Calculation_350154876598411339:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[usr:Calculation_350154876598411339:vtmin:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0fg5f9510yktd81eigu1o10xko06].[sum:SoloTackle:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Adrian Clayborn&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Anthony Pittman&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ben Niemann&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bryan Mone&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Charles Omenihu&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Craig Robertson&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;David Mayo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Derrick Nnadi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Eddie Vanderdoes&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Gerald McCoy&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jacob Tuioti-Mariner&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jeremiah Attaochu&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jonathan Bostic&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Justin Houston&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kyle Peko&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lorenzo Carter&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Maurice Hurst&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nathan Shepherd&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Poona Ford&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Romeo Okwara&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Shelby Harris&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tanner Vallejo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Troy Reeder&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Whitney Mercilus&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;A&apos;Shawn Robinson&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Andrew Billings&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Avery Moss&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Brandon Mebane&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Carl Nassib&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clelin Ferrell&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Danny Shelton&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;DeMarcus Walker&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Dontavius Russell&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Foyesade Oluokun&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ifeadi Odenigbo&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jarran Reed&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Joey Bosa&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Josh Mauro&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kevin Givens&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lawrence Guy&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mark Barron&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Montravius Adams&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Olsen Pierre&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Reggie Ragland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sebastian Joseph-Day&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Steve Longa&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Travin Howard&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Vince Biegel&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Abry Jones&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Anthony Barr&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Beau Allen&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brian Burns&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cassius Marsh&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Corey Liuget&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Darius Leonard&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Deone Bucannon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Duke Riley&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Fred Warner&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Isaiah Mack&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jaylon Smith&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;John Jenkins&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jullian Taylor&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Khalil Mack&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Leonard Williams&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Matt Dickerson&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Myles Jack&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Patrick Onwuasor&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Robert Nkemdiche&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Shaquem Griffin&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;T.J. Watt&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Trevon Coley&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vita Vea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Akiem Hicks&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Antwaun Woods&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;BJ Hill&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cameron Heyward&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Chris Peace&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Daeshon Hall&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;De&apos;Vondre Campbell&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Devon Kennard&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Emeke Egbule&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Greg Gaines&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Jalen Reeves-Maybin&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Jerry Hughes&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Jordan Evans&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;K.J. Wright&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kyler Fackrell&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Malcom Brown&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Michael Brockers&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nick Kwiatkoski&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Quinnen Williams&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ryan Anderson&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Shilique Calhoun&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Taven Bryan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tyler Lancaster&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Za&apos;Darius Smith&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ahmad Gooden&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Anthony Rush&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Benardrick McKinney&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bud Dupree&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chase Winovich&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;D.J. Jones&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;David Onyemata&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Devaroe Lawrence&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Efe Obada&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Gerald Willis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jadeveon Clowney&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jeremiah Valoaga&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jonathan Bullard&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Justin Jones&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kyle Phillips&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Luke Kuechly&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Maxx Crosby&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ndamukong Suh&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Porter Gustin&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ronald Blair III&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sheldon Day&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tanoh Kpassagnon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trysten Hill&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Will Compton&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Adam Butler&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Anthony Chickillo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ben Banogu&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bruce Hector&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Chad Thomas&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Corey Peters&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Daron Payne&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Derek Barnett&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dylan Cole&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Freedom Akinmoladun&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jabaal Sheard&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jayon Brown&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;John Simon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jurrell Casey&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kiko Alonso&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lerentee McCray&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Matt Ioannidis&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Najee Goode&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pete Robertson&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Robert Quinn&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Shaquil Barrett&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Taco Charlton&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Trey Flowers&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Von Miller&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Alexander Johnson&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Austin Johnson&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Brandon Dunn&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Carl Granderson&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Christian Wilkins&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dan McCullers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Deion Jones&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dont&apos;a Hightower&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fletcher Cox&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Henry Anderson&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jamie Meder&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Joel Heath&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Josh Allen&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kentavius Street&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Larry Ogunjobi&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mario Addison&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Miles Brown&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Olasunkanmi Adeniyi&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rasheem Green&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Samson Ebukam&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Stephen Weatherly&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Timmy Jernigan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Vernon Butler&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Aaron Donald&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Andrew Brown&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Azeez Al-Shaair&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Brandon Williams&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Carlos Dunlap&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Clinton McDonald&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Danny Trevathan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Demario Davis&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Dorance Armstrong&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Frank Clark&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Isaac Rochell&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Jason Pierre-Paul&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Joey Ivie&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Josh Sweat&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kevin Pierre-Louis&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Leighton Vander Esch&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Markus Golden&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Morgan Fox&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Oren Burks&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Renell Wren&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Shamar Stephen&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Steve McLendon&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tremaine Edmunds&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vince Williams&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Alec Ogletree&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Austin Bryant&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Brandin Bryant&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Caraun Reid&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Christian Jones&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Damon Harrison&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dee Ford&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Domata Peko&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Everson Griffen&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Harold Landry&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;James Vaughters&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Joe Thomas&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jordan Willis&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kareem Martin&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;L.J. Fort&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Marcus Davenport&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mike Pennel&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Noah Spence&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rashaan Evans&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sam Eguavoen&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Stacy McGee&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Thomas Davis Sr&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tyus Bowser&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Adam Gotsis&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anthony Hitchens&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ben Burr-Kirven&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bruce Irvin&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chandler Jones&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Corey Thompson&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Darryl Johnson&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Derek Wolfe&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ed Oliver&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Genard Avery&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jack Crawford&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jayrone Elliott&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Johnathan Hankins&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Justin Ellis&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kingsley Keke&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Linval Joseph&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Matt Judon&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nate Orchard&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Peter Kalambayi&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Robert Spillane&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sharif Finch&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tahir Whitehead&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Trey Hendrickson&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Wes Horton&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Al Woods&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Arden Key&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Blake Martinez&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cameron Jordan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Chris Smith&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dalvin Tomlinson&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Deadrin Senat&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dexter Lawrence&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Emmanuel Ogbah&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Grover Stewart&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Jalyn Holmes&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Jerry Tillery&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Jordan Hicks&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kahzin Daniels&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kylie Fitts&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Maliek Collins&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Michael Dogbe&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nick Vigil&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Quinton Jefferson&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ryan Bee&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Shy Tuttle&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Taylor Stallworth&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tyquan Lewis&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Zach Cunningham&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Al-Quadin Muhammad&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Arik Armstead&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bobby Wagner&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cameron Smith&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Chris Wormley&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Damien Wilson&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Dean Lowry&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Deyon Sizer&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Eric Kendricks&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Haason Reddick&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jamal Davis II&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jihad Ward&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jordan Jenkins&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kamalei Correa&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kyzir White&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malik Reed&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Michael Pierce&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Nick Williams&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Raekwon McMillan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ryan Kerrigan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sione Takitaki&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Terrell McClain&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tyrell Adams&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Zach Kerr&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Alex Okafor&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Austin Calitro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Brandon Copeland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Carl Davis&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Christian Miller&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Damontre Moore&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;DeForest Buckner&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Donald Payne&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ezekiel Ansah&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Harvey Langi&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jamie Collins&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Joe Walker&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Josey Jewell&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kenny Clark&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;LaRoy Reynolds&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Margus Hunt&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mike Purcell&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ogbonnia Okoronkwo&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Rashan Gary&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sam Hubbard&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Star Lotulelei&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tim Settle&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Uchenna Nwosu&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Allen Bailey&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Austin Larkin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Brandon Graham&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Carl Lawson&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Clay Matthews&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Danielle Hunter&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;DeMarcus Lawrence&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dontari Poe&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Folorunso Fatukasi&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hercules Mata&apos;afa&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jarrad Davis&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Joel Iyiegbuniwe&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Josh Bynes&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kerry Hyder&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lavonte David&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mario Edwards Jr&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Montez Sweat&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Olivier Vernon&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Reggie Gilbert&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sean Lee&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Stephone Anthony&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Todd Davis&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Vic Beasley Jr&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;AJ Klein&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Anthony Walker&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Benson Mayowa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Byron Cowart&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Chris Jones&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;D.J. Reader&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Davon Godchaux&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Devin Bush&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Eli Ankou&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Germaine Pratt&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jahlani Tavai&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jermaine Carter&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jonathan Harris&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Justin March-Lillard&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kyle Van Noy&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mack Wilson&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Melvin Ingram III&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nicholas Morrow&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Preston Smith&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Roquan Smith&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sheldon Rankins&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tanzel Smart&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;TY McGill&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;William Gholston&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Adarius Taylor&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Anthony Nelson&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ben Gedeon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bryan Cox Jr&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Charles Harris&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cory Littleton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;David Long&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Derick Roberson&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Eddie Goldman&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Geno Atkins&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jacob Martin&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jeffery Simmons&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jonathan Allen&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Justin Hollins&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kyle Love&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lorenzo Alexander&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Matt Milano&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nathan Gerry&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;PJ Hall&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Rodney Gunter&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Shaun Dion Hamilton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Takkarist McKinley&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Treyvon Hester&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Wesley Woodyard&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Aaron Lynch&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Andrew Van Ginkel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;B.J. Goodson&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Brennan Scarlett&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Carlos Watkins&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cody Barton&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dante Fowler Jr.&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Demone Harris&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dre Greenlaw&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Frank Herron&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Isaiah Buggs&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Javon Hargrave&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;John Atkins&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Josh Tupou&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kevin Strong&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Leon Jacobs&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Marquel Lee&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mychal Kendricks&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Oshane Ximines&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;RJ McIntosh&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Shaq Lawson&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sylvester Williams&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Trent Harris&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Vincent Taylor&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Albert Huggins&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Armon Watts&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Branden Jackson&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cameron Wake&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Christian Covington&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Damion Square&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Deatrich Wise Jr&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dion Jordan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Eric Wilson&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hardy Nickerson&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;James Burgess&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Joe Schobert&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jordan Phillips&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kamu Grugier-Hill&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;L.J. Collier&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Manti Te&apos;o&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mike Daniels&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Nigel Bradham&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rakeem Nunez-Roches&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sam Acho&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Solomon Thomas&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Terrell Suggs&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tyson Alualu&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Zach Sieler&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Akeem Spence&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Anthony Zettel&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bilal Nichols&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Calais Campbell&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Chris Odom&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Da&apos;Shawn Hand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Dawuane Smoot&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Devin White&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Elijah Lee&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Grady Jarrett&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jaleel Johnson&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jerome Baker&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jonathan Wynn&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Justin Zimmer&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kyle Wilber&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Malcolm Smith&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Michael Bennett&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nick Bosa&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Quincy Williams&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Roy Robertson-Harris&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sheldon Richardson&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tarell Basham&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tyeler Davison&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Yannick Ngakoue&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Abdullah Anderson&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Angelo Blackson&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Barkevious Mingo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Brent Urban&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Carroll Phillips&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cole Holcomb&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;DaQuan Jones&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Denico Autry&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dre&apos;Mont Jones&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Frankie Luvu&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Isaiah Irving&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jaylon Ferguson&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;John Cominsky&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Julian Stanford&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Khalen Saunders&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Leonard Floyd&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Marquis Haynes&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Myles Garrett&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Patrick O&apos;Connor&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rob McCray&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Shaq Thompson&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;T.J. Edwards&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Trent Murphy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Vinny Curry&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:TechniqueName:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;6&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;0&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;3&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Outside&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;7&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;4&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;1&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;4i&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;9&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;5&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;2&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Off Ball&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;2i&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='AnalyticsChallenge2020Data.txt' id='AnalyticsChallenge2020Data.txt_D1EE2EADD3494D55B08B9B03C81D33E4'>
            <properties context=''>
              <relation connection='textscan.06uq2mo0s1q9ch15p9hxc0rsslmq' name='AnalyticsChallenge2020Data.txt' table='[AnalyticsChallenge2020Data#txt]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='GameID' ordinal='0' />
                  <column datatype='integer' name='EventID' ordinal='1' />
                  <column datatype='integer' name='Season' ordinal='2' />
                  <column datatype='integer' name='Week' ordinal='3' />
                  <column datatype='string' name='StadiumName' ordinal='4' />
                  <column datatype='string' name='OffensiveTeam' ordinal='5' />
                  <column datatype='string' name='DefensiveTeam' ordinal='6' />
                  <column datatype='integer' name='OffTeamScoreBefore' ordinal='7' />
                  <column datatype='integer' name='DefTeamScoreBefore' ordinal='8' />
                  <column datatype='integer' name='Quarter' ordinal='9' />
                  <column datatype='integer' name='TimeLeft' ordinal='10' />
                  <column datatype='integer' name='Down' ordinal='11' />
                  <column datatype='integer' name='ToGo' ordinal='12' />
                  <column datatype='string' name='SideOfField' ordinal='13' />
                  <column datatype='integer' name='StartYard' ordinal='14' />
                  <column datatype='string' name='EventType' ordinal='15' />
                  <column datatype='integer' name='FirstDown' ordinal='16' />
                  <column datatype='integer' name='Touchdown' ordinal='17' />
                  <column datatype='integer' name='Safety' ordinal='18' />
                  <column datatype='integer' name='Turnover' ordinal='19' />
                  <column datatype='string' name='RunDirection' ordinal='20' />
                  <column datatype='integer' name='UsedDesignedGap' ordinal='21' />
                  <column datatype='integer' name='Attempt' ordinal='22' />
                  <column datatype='integer' name='Completion' ordinal='23' />
                  <column datatype='integer' name='Spike' ordinal='24' />
                  <column datatype='integer' name='ThrowDepth' ordinal='25' />
                  <column datatype='integer' name='PressureOnPlay' ordinal='26' />
                  <column datatype='integer' name='SackOnPlay' ordinal='27' />
                  <column datatype='integer' name='PassBreakupOnPlay' ordinal='28' />
                  <column datatype='integer' name='InterceptionOnPlay' ordinal='29' />
                  <column datatype='integer' name='FumbleByPasser' ordinal='30' />
                  <column datatype='integer' name='FumbleByRusher' ordinal='31' />
                  <column datatype='integer' name='FumbleByReceiver' ordinal='32' />
                  <column datatype='integer' name='OffensiveYardage' ordinal='33' />
                  <column datatype='real' name='EPA' ordinal='34' />
                  <column datatype='string' name='PlayDesc' ordinal='35' />
                  <column datatype='integer' name='PlayerId' ordinal='36' />
                  <column datatype='string' name='Name' ordinal='37' />
                  <column datatype='string' name='RosterPosition' ordinal='38' />
                  <column datatype='string' name='OnFieldPosition' ordinal='39' />
                  <column datatype='string' name='SideOfBall' ordinal='40' />
                  <column datatype='string' name='TechniqueName' ordinal='41' />
                  <column datatype='integer' name='IsRushing' ordinal='42' />
                  <column datatype='integer' name='SoloTackle' ordinal='43' />
                  <column datatype='integer' name='AssistedTackle' ordinal='44' />
                  <column datatype='integer' name='Pressure' ordinal='45' />
                  <column datatype='integer' name='SoloSack' ordinal='46' />
                  <column datatype='integer' name='AssistedSack' ordinal='47' />
                  <column datatype='integer' name='PassBreakup' ordinal='48' />
                  <column datatype='integer' name='Interception' ordinal='49' />
                  <column datatype='integer' name='ForcedFumble' ordinal='50' />
                  <column datatype='integer' name='RecoveredFumble' ordinal='51' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='EPA'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>1st Down EPA (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column datatype='real' name='[EPA]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[EPA]' derivation='Sum' name='[sum:EPA:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Aaron Donald&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Arik Armstead&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Beau Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Brandon Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bruce Irvin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bud Dupree&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Heyward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Jordan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Carlos Dunlap&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chandler Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chris Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Corey Peters&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Danielle Hunter&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dante Fowler Jr.&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Davon Godchaux&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dean Lowry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ed Oliver&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Fletcher Cox&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Geno Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Grady Jarrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Henry Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ifeadi Odenigbo&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jabaal Sheard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jadeveon Clowney&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;James Burgess&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jarran Reed&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jason Pierre-Paul&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Javon Hargrave&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jaylon Ferguson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jihad Ward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jonathan Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Jenkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Phillips&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jurrell Casey&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Justin Houston&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Khalil Mack&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Larry Ogunjobi&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Leonard Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maliek Collins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Markus Golden&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Matt Judon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maurice Hurst&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maxx Crosby&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Melvin Ingram III&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Bennett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Montez Sweat&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ndamukong Suh&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Nick Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Poona Ford&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Porter Gustin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Preston Smith&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinnen Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinton Jefferson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Robert Quinn&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ryan Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sam Hubbard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaq Lawson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaquil Barrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shelby Harris&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sheldon Richardson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Stephen Weatherly&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Steve McLendon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;T.J. Watt&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tanoh Kpassagnon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tarell Basham&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Taven Bryan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Timmy Jernigan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Trent Murphy&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyeler Davison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyson Alualu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyus Bowser&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vernon Butler&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vic Beasley Jr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vince Biegel&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vinny Curry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vita Vea&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Yannick Ngakoue&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Za&apos;Darius Smith&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]'>
            <groupfilter function='member' level='[none:TechniqueName:nk]' member='&quot;Outside&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]' value='true' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' min='-15.0' num-steps='20' palette='brown_10_0' reverse='true' symmetric='false' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
              <lod column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{536C93CC-CEB7-4220-8F50-4798570D2486}' />
    </worksheet>
    <worksheet name='EPA 1st down'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>1st Down EPA (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column datatype='integer' name='[Down]' role='measure' type='quantitative' />
            <column datatype='real' name='[EPA]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Down]' derivation='None' name='[none:Down:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[EPA]' derivation='Sum' name='[sum:EPA:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]'>
            <groupfilter function='member' level='[none:Down:ok]' member='1' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Aaron Donald&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Arik Armstead&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Beau Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Brandon Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bruce Irvin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bud Dupree&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Heyward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Jordan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Carlos Dunlap&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chandler Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chris Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Corey Peters&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Danielle Hunter&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dante Fowler Jr.&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Davon Godchaux&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dean Lowry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ed Oliver&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Fletcher Cox&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Geno Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Grady Jarrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Henry Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ifeadi Odenigbo&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jabaal Sheard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jadeveon Clowney&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;James Burgess&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jarran Reed&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jason Pierre-Paul&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Javon Hargrave&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jaylon Ferguson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jihad Ward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jonathan Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Jenkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Phillips&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jurrell Casey&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Justin Houston&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Khalil Mack&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Larry Ogunjobi&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Leonard Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maliek Collins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Markus Golden&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Matt Judon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maurice Hurst&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maxx Crosby&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Melvin Ingram III&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Bennett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Montez Sweat&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ndamukong Suh&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Nick Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Poona Ford&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Porter Gustin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Preston Smith&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinnen Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinton Jefferson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Robert Quinn&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ryan Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sam Hubbard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaq Lawson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaquil Barrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shelby Harris&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sheldon Richardson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Stephen Weatherly&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Steve McLendon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;T.J. Watt&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tanoh Kpassagnon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tarell Basham&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Taven Bryan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Timmy Jernigan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Trent Murphy&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyeler Davison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyson Alualu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyus Bowser&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vernon Butler&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vic Beasley Jr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vince Biegel&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vinny Curry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vita Vea&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Yannick Ngakoue&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Za&apos;Darius Smith&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]' value='true' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' min='-15.0' num-steps='20' palette='brown_10_0' reverse='true' symmetric='false' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
              <lod column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{AA475BA8-630C-48BF-A0B8-31E226DEF40C}' />
    </worksheet>
    <worksheet name='EPA 3rd Down'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>1st Down EPA (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column datatype='integer' name='[Down]' role='measure' type='quantitative' />
            <column datatype='real' name='[EPA]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Down]' derivation='None' name='[none:Down:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[EPA]' derivation='Sum' name='[sum:EPA:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]'>
            <groupfilter function='member' level='[none:Down:ok]' member='3' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Aaron Donald&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Arik Armstead&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Beau Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Brandon Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bruce Irvin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bud Dupree&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Heyward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Jordan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Carlos Dunlap&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chandler Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chris Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Corey Peters&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Danielle Hunter&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dante Fowler Jr.&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Davon Godchaux&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dean Lowry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ed Oliver&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Fletcher Cox&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Geno Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Grady Jarrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Henry Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ifeadi Odenigbo&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jabaal Sheard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jadeveon Clowney&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;James Burgess&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jarran Reed&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jason Pierre-Paul&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Javon Hargrave&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jaylon Ferguson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jihad Ward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jonathan Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Jenkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Phillips&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jurrell Casey&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Justin Houston&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Khalil Mack&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Larry Ogunjobi&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Leonard Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maliek Collins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Markus Golden&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Matt Judon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maurice Hurst&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maxx Crosby&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Melvin Ingram III&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Bennett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Montez Sweat&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ndamukong Suh&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Nick Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Poona Ford&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Porter Gustin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Preston Smith&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinnen Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinton Jefferson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Robert Quinn&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ryan Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sam Hubbard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaq Lawson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaquil Barrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shelby Harris&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sheldon Richardson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Stephen Weatherly&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Steve McLendon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;T.J. Watt&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tanoh Kpassagnon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tarell Basham&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Taven Bryan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Timmy Jernigan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Trent Murphy&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyeler Davison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyson Alualu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyus Bowser&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vernon Butler&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vic Beasley Jr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vince Biegel&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vinny Curry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vita Vea&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Yannick Ngakoue&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Za&apos;Darius Smith&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]' value='true' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' min='-15.0' num-steps='13' palette='brown_10_0' reverse='true' symmetric='false' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
              <lod column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{73CB8DEA-AE83-443A-A68E-B2A101BDDAB0}' />
    </worksheet>
    <worksheet name='EPA 4th Down'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>1st Down EPA (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column datatype='integer' name='[Down]' role='measure' type='quantitative' />
            <column datatype='real' name='[EPA]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Down]' derivation='None' name='[none:Down:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[EPA]' derivation='Sum' name='[sum:EPA:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]'>
            <groupfilter function='member' level='[none:Down:ok]' member='4' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Aaron Donald&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Arik Armstead&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Beau Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Brandon Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bruce Irvin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bud Dupree&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Heyward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Jordan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Carlos Dunlap&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chandler Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chris Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Corey Peters&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Danielle Hunter&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dante Fowler Jr.&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Davon Godchaux&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dean Lowry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ed Oliver&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Fletcher Cox&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Geno Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Grady Jarrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Henry Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ifeadi Odenigbo&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jabaal Sheard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jadeveon Clowney&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;James Burgess&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jarran Reed&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jason Pierre-Paul&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Javon Hargrave&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jaylon Ferguson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jihad Ward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jonathan Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Jenkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Phillips&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jurrell Casey&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Justin Houston&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Khalil Mack&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Larry Ogunjobi&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Leonard Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maliek Collins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Markus Golden&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Matt Judon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maurice Hurst&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maxx Crosby&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Melvin Ingram III&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Bennett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Montez Sweat&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ndamukong Suh&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Nick Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Poona Ford&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Porter Gustin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Preston Smith&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinnen Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinton Jefferson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Robert Quinn&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ryan Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sam Hubbard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaq Lawson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaquil Barrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shelby Harris&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sheldon Richardson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Stephen Weatherly&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Steve McLendon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;T.J. Watt&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tanoh Kpassagnon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tarell Basham&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Taven Bryan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Timmy Jernigan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Trent Murphy&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyeler Davison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyson Alualu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyus Bowser&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vernon Butler&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vic Beasley Jr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vince Biegel&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vinny Curry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vita Vea&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Yannick Ngakoue&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Za&apos;Darius Smith&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]' value='true' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' min='-15.0' num-steps='13' palette='brown_10_0' reverse='true' symmetric='false' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
              <lod column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{554A02CF-0B1E-40BC-B89A-458063FC3754}' />
    </worksheet>
    <worksheet name='EPA &lt;5min'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>1st Down EPA (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column datatype='real' name='[EPA]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Quarter]' role='dimension' type='quantitative' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column caption='Time Left' datatype='integer' name='[TimeLeft]' role='measure' type='quantitative' />
            <column-instance column='[EPA]' derivation='Min' name='[min:EPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Quarter]' derivation='None' name='[none:Quarter:ok]' pivot='key' type='ordinal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[TimeLeft]' derivation='None' name='[none:TimeLeft:qk]' pivot='key' type='quantitative' />
            <column-instance column='[EPA]' derivation='Sum' name='[sum:EPA:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Aaron Donald&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Arik Armstead&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Beau Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Brandon Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bruce Irvin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bud Dupree&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Heyward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Jordan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Carlos Dunlap&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chandler Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chris Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Corey Peters&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Danielle Hunter&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dante Fowler Jr.&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Davon Godchaux&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dean Lowry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ed Oliver&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Fletcher Cox&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Geno Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Grady Jarrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Henry Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ifeadi Odenigbo&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jabaal Sheard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jadeveon Clowney&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;James Burgess&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jarran Reed&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jason Pierre-Paul&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Javon Hargrave&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jaylon Ferguson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jihad Ward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jonathan Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Jenkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Phillips&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jurrell Casey&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Justin Houston&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Khalil Mack&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Larry Ogunjobi&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Leonard Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maliek Collins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Markus Golden&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Matt Judon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maurice Hurst&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maxx Crosby&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Melvin Ingram III&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Bennett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Montez Sweat&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ndamukong Suh&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Nick Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Poona Ford&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Porter Gustin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Preston Smith&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinnen Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinton Jefferson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Robert Quinn&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ryan Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sam Hubbard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaq Lawson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaquil Barrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shelby Harris&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sheldon Richardson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Stephen Weatherly&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Steve McLendon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;T.J. Watt&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tanoh Kpassagnon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tarell Basham&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Taven Bryan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Timmy Jernigan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Trent Murphy&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyeler Davison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyson Alualu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyus Bowser&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vernon Butler&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vic Beasley Jr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vince Biegel&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vinny Curry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vita Vea&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Yannick Ngakoue&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Za&apos;Darius Smith&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Quarter:ok]' member='2' />
              <groupfilter function='member' level='[none:Quarter:ok]' member='4' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TimeLeft:qk]' included-values='in-range'>
            <min>1</min>
            <max>300</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:ok]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TimeLeft:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]' value='true' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' min='-15.0' num-steps='13' palette='brown_10_0' reverse='true' symmetric='false' type='interpolated' />
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:qk]' min='-15.0' num-steps='13' palette='brown_10_0' reverse='true' symmetric='false' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:qk]' />
              <lod column='[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{7FE1A1C3-C32E-4A4E-B576-0B73C5132DC5}' />
    </worksheet>
    <worksheet name='Forced Fumbles'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Forced Fumbles vs Running Backs, by Position; Weeks 9-17 (2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Fumble By Rusher' datatype='integer' name='[FumbleByRusher]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[FumbleByRusher]' derivation='Sum' name='[sum:FumbleByRusher:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Heyward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dean Lowry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Henry Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Leonard Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Porter Gustin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Robert Quinn&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tarell Basham&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyson Alualu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vinny Curry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Yannick Ngakoue&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' included-values='in-range'>
            <min>1</min>
            <max>6</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{44B70A7F-FDF5-4032-AE90-D9F38F863883}' />
    </worksheet>
    <worksheet name='Forced Fumbles (2)'>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Fumble By Rusher' datatype='integer' name='[FumbleByRusher]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[FumbleByRusher]' derivation='Sum' name='[sum:FumbleByRusher:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Davon Godchaux&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Fletcher Cox&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Javon Hargrave&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinnen Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sheldon Richardson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Steve McLendon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Timmy Jernigan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyeler Davison&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' included-values='in-range'>
            <min>1</min>
            <max>6</max>
          </filter>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{851D5AC1-9F46-4A97-B9D1-37AF747C16AA}' />
    </worksheet>
    <worksheet name='Forced Fumbles (3)'>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Fumble By Rusher' datatype='integer' name='[FumbleByRusher]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[FumbleByRusher]' derivation='Sum' name='[sum:FumbleByRusher:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bud Dupree&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Clay Matthews&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dante Fowler Jr.&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;James Burgess&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Jenkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Preston Smith&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;T.J. Watt&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vic Beasley Jr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vince Biegel&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Za&apos;Darius Smith&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' included-values='in-range'>
            <min>1</min>
            <max>6</max>
          </filter>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{E641EF0F-9646-4B7B-953C-05DB867F26D6}' />
    </worksheet>
    <worksheet name='Pressures'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Pressures Leaders by Position (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Pressure On Play' datatype='integer' name='[PressureOnPlay]' role='measure' type='quantitative' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[PressureOnPlay]' derivation='Sum' name='[sum:PressureOnPlay:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Aaron Donald&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chris Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Corey Peters&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Geno Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Javon Hargrave&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maliek Collins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ndamukong Suh&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vita Vea&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' included-values='in-range'>
            <min>1</min>
            <max>65</max>
          </filter>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' palette='blue_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{DA9171C3-9103-48B5-84EA-4F8A14DD4ED5}' />
    </worksheet>
    <worksheet name='Pressures 3rd'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>1st Down Pressures</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column datatype='integer' name='[Down]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Pressure On Play' datatype='integer' name='[PressureOnPlay]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Quarter]' role='dimension' type='quantitative' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Down]' derivation='None' name='[none:Down:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Quarter]' derivation='None' name='[none:Quarter:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[PressureOnPlay]' derivation='Sum' name='[sum:PressureOnPlay:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]'>
            <groupfilter function='member' level='[none:Down:ok]' member='1' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Aaron Donald&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Andrew Billings&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Anthony Barr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Arik Armstead&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Beau Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Brandon Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bruce Irvin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bud Dupree&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Heyward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Jordan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Carlos Dunlap&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chandler Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chris Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Corey Peters&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Danielle Hunter&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dante Fowler Jr.&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Davon Godchaux&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dean Lowry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ed Oliver&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Eli Ankou&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Fletcher Cox&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Frank Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Geno Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Grady Jarrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Henry Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ifeadi Odenigbo&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jabaal Sheard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jadeveon Clowney&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;James Burgess&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jarran Reed&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jason Pierre-Paul&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Javon Hargrave&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jaylon Ferguson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jeremiah Attaochu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jihad Ward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Joey Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;John Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jonathan Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Jenkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Phillips&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Josh Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jurrell Casey&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Justin Houston&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Khalil Mack&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Leonard Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Lorenzo Alexander&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maliek Collins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Mario Addison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Markus Golden&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Matt Judon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maurice Hurst&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maxx Crosby&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Melvin Ingram III&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Bennett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Brockers&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Montez Sweat&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ndamukong Suh&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Nick Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Poona Ford&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Porter Gustin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Preston Smith&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinnen Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinton Jefferson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Robert Quinn&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ryan Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sam Hubbard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaquil Barrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shelby Harris&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sheldon Richardson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Stephen Weatherly&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Steve McLendon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;T.J. Watt&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tanoh Kpassagnon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tarell Basham&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Taven Bryan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Timmy Jernigan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Trent Murphy&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyeler Davison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyson Alualu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyus Bowser&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vernon Butler&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vic Beasley Jr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vince Biegel&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vinny Curry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vita Vea&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Yannick Ngakoue&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Za&apos;Darius Smith&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]' included-values='in-range'>
            <min>1</min>
            <max>5</max>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]'>
            <groupfilter from='&quot;0&quot;' function='range' level='[none:TechniqueName:nk]' to='&quot;Outside&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' included-values='non-null' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] * [federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
      </table>
      <simple-id uuid='{16D9EFD7-790A-47EF-955E-A620CF3FC027}' />
    </worksheet>
    <worksheet name='Pressures DE'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Pressures Leaders by Position (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Pressure On Play' datatype='integer' name='[PressureOnPlay]' role='measure' type='quantitative' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[PressureOnPlay]' derivation='Sum' name='[sum:PressureOnPlay:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' palette='blue_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{9441B1B7-7EAD-4CE2-88BB-826C9CB0E77D}' />
    </worksheet>
    <worksheet name='Pressures LB (2)'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Pressures Leaders by Position (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Pressure On Play' datatype='integer' name='[PressureOnPlay]' role='measure' type='quantitative' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[PressureOnPlay]' derivation='Sum' name='[sum:PressureOnPlay:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' palette='blue_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{651F0A53-83DC-43A3-9CDF-5BDDC0956AB0}' />
    </worksheet>
    <worksheet name='QB Fumbles'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>QB Fumbles Forced by Position (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Event Type' datatype='string' name='[EventType]' role='dimension' type='nominal' />
            <column caption='Fumble By Passer' datatype='integer' name='[FumbleByPasser]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[EventType]' derivation='None' name='[none:EventType:nk]' pivot='key' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[FumbleByPasser]' derivation='Sum' name='[sum:FumbleByPasser:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventType:nk]'>
            <groupfilter function='member' level='[none:EventType:nk]' member='&quot;pass&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Heyward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ifeadi Odenigbo&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jadeveon Clowney&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jason Pierre-Paul&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jihad Ward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jonathan Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Justin Houston&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Robert Quinn&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Stephen Weatherly&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Yannick Ngakoue&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' included-values='in-range'>
            <min>1</min>
            <max>7</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventType:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' palette='green_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{CC6FBE4E-2904-4599-A425-848757BDFBEC}' />
    </worksheet>
    <worksheet name='QB Fumbles (2)'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>QB Fumbles Forced by Position (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Event Type' datatype='string' name='[EventType]' role='dimension' type='nominal' />
            <column caption='Fumble By Passer' datatype='integer' name='[FumbleByPasser]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[EventType]' derivation='None' name='[none:EventType:nk]' pivot='key' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[FumbleByPasser]' derivation='Sum' name='[sum:FumbleByPasser:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventType:nk]'>
            <groupfilter function='member' level='[none:EventType:nk]' member='&quot;pass&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' included-values='in-range'>
            <min>1</min>
            <max>7</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventType:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' palette='green_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{D134DDB3-654E-4BEA-93D1-C86DCAA8ABC2}' />
    </worksheet>
    <worksheet name='QB Fumbles (3)'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>QB Fumbles Forced by Position (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Event Type' datatype='string' name='[EventType]' role='dimension' type='nominal' />
            <column caption='Fumble By Passer' datatype='integer' name='[FumbleByPasser]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[EventType]' derivation='None' name='[none:EventType:nk]' pivot='key' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[FumbleByPasser]' derivation='Sum' name='[sum:FumbleByPasser:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventType:nk]'>
            <groupfilter function='member' level='[none:EventType:nk]' member='&quot;pass&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' included-values='in-range'>
            <min>1</min>
            <max>7</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventType:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' palette='green_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{9291B514-4372-4C27-96CA-8A158B4B5BC5}' />
    </worksheet>
    <worksheet name='Sacks'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Sacks Leaders by Position (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column datatype='integer' name='[Down]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Solo Sack' datatype='integer' name='[SoloSack]' role='measure' type='quantitative' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Down]' derivation='Attribute' name='[attr:Down:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[SoloSack]' derivation='Sum' name='[sum:SoloSack:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SoloSack]' derivation='Sum' name='[sum:SoloSack:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[attr:Down:ok]'>
            <groupfilter function='level-members' level='[attr:Down:ok]' />
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:SoloSack:qk]' included-values='in-range'>
            <min>1</min>
            <max>40</max>
          </filter>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:SoloSack:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[attr:Down:ok]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:SoloSack:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:SoloSack:qk]' palette='orange_10_0' type='interpolated' />
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:SoloSack:vtsum:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:SoloSack:vtsum:qk]' palette='orange_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[federated.0fg5f9510yktd81eigu1o10xko06].[attr:Down:ok]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:SoloSack:vtsum:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:SoloSack:vtsum:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{A6708A5E-9132-42A7-9E4A-369943030B0F}' />
    </worksheet>
    <worksheet name='Sacks 3rd '>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>1st Down Sacks</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Assisted Sack' datatype='integer' name='[AssistedSack]' role='measure' type='quantitative' />
            <column caption='Total Sacks' datatype='integer' name='[Calculation_350154876284969014]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([SoloSack]+[AssistedSack])' />
            </column>
            <column datatype='integer' name='[Down]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Quarter]' role='dimension' type='quantitative' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Solo Sack' datatype='integer' name='[SoloSack]' role='measure' type='quantitative' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Down]' derivation='None' name='[none:Down:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Quarter]' derivation='None' name='[none:Quarter:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_350154876284969014]' derivation='User' name='[usr:Calculation_350154876284969014:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]'>
            <groupfilter function='member' level='[none:Down:ok]' member='1' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Aaron Donald&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Andrew Billings&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Anthony Barr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Arik Armstead&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Beau Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Brandon Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bruce Irvin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bud Dupree&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Heyward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Jordan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Carlos Dunlap&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chandler Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chris Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Corey Peters&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Danielle Hunter&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dante Fowler Jr.&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Davon Godchaux&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dean Lowry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ed Oliver&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Eli Ankou&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Fletcher Cox&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Frank Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Geno Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Grady Jarrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Henry Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ifeadi Odenigbo&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jabaal Sheard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jadeveon Clowney&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;James Burgess&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jarran Reed&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jason Pierre-Paul&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Javon Hargrave&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jaylon Ferguson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jeremiah Attaochu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jihad Ward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Joey Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;John Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jonathan Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Jenkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Phillips&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Josh Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jurrell Casey&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Justin Houston&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Khalil Mack&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Leonard Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Lorenzo Alexander&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maliek Collins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Mario Addison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Markus Golden&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Matt Judon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maurice Hurst&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maxx Crosby&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Melvin Ingram III&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Bennett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Brockers&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Montez Sweat&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ndamukong Suh&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Nick Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Poona Ford&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Porter Gustin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Preston Smith&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinnen Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinton Jefferson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Robert Quinn&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ryan Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sam Hubbard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaquil Barrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shelby Harris&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sheldon Richardson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Stephen Weatherly&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Steve McLendon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;T.J. Watt&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tanoh Kpassagnon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tarell Basham&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Taven Bryan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Timmy Jernigan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Trent Murphy&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyeler Davison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyson Alualu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyus Bowser&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vernon Butler&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vic Beasley Jr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vince Biegel&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vinny Curry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vita Vea&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Yannick Ngakoue&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Za&apos;Darius Smith&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]' included-values='in-range'>
            <min>1</min>
            <max>5</max>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]'>
            <groupfilter from='&quot;0&quot;' function='range' level='[none:TechniqueName:nk]' to='&quot;Outside&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[usr:Calculation_350154876284969014:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[usr:Calculation_350154876284969014:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] * [federated.0fg5f9510yktd81eigu1o10xko06].[usr:Calculation_350154876284969014:qk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
      </table>
      <simple-id uuid='{3802383A-2B12-475A-9819-E5DD6F59D4A5}' />
    </worksheet>
    <worksheet name='Sheet 14 (2)'>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column datatype='integer' name='[Down]' role='measure' type='quantitative' />
            <column datatype='real' name='[EPA]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Down]' derivation='None' name='[none:Down:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[EPA]' derivation='Sum' name='[sum:EPA:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Aaron Donald&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Andrew Billings&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Anthony Barr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Arik Armstead&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Beau Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Brandon Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bruce Irvin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bud Dupree&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Heyward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Jordan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Carlos Dunlap&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chandler Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chris Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Corey Peters&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Danielle Hunter&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dante Fowler Jr.&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Davon Godchaux&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dean Lowry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ed Oliver&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Eli Ankou&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Fletcher Cox&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Frank Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Geno Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Grady Jarrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Henry Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ifeadi Odenigbo&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jabaal Sheard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jadeveon Clowney&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;James Burgess&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jarran Reed&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jason Pierre-Paul&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Javon Hargrave&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jaylon Ferguson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jeremiah Attaochu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jihad Ward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Joey Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;John Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jonathan Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Jenkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Phillips&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Josh Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jurrell Casey&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Justin Houston&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Khalil Mack&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Leonard Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Lorenzo Alexander&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maliek Collins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Mario Addison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Markus Golden&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Matt Judon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maurice Hurst&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maxx Crosby&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Melvin Ingram III&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Bennett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Brockers&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Montez Sweat&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ndamukong Suh&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Nick Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Poona Ford&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Porter Gustin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Preston Smith&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinnen Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinton Jefferson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Robert Quinn&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ryan Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sam Hubbard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaquil Barrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shelby Harris&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sheldon Richardson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Stephen Weatherly&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Steve McLendon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;T.J. Watt&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tanoh Kpassagnon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tarell Basham&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Taven Bryan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Timmy Jernigan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Trent Murphy&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyeler Davison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyson Alualu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyus Bowser&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vernon Butler&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vic Beasley Jr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vince Biegel&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vinny Curry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vita Vea&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Yannick Ngakoue&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Za&apos;Darius Smith&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' included-values='in-range'>
            <min>0.0</min>
            <max>26.429703</max>
          </filter>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' symmetric='false' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#f0efdd</color>
                <color>#f0edc9</color>
                <color>#f0ebb5</color>
                <color>#f0e9a1</color>
                <color>#f0e78e</color>
                <color>#efe67a</color>
                <color>#efe466</color>
                <color>#efe253</color>
                <color>#efe03f</color>
                <color>#efdf2c</color>
              </color-palette>
            </encoding>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols>([federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk])</cols>
      </table>
      <simple-id uuid='{B4847B01-5F5A-4586-8BAC-43272DE24D9B}' />
    </worksheet>
    <worksheet name='Sheet 16'>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column datatype='real' name='[EPA]' role='measure' type='quantitative' />
            <column caption='Pressure On Play' datatype='integer' name='[PressureOnPlay]' role='measure' type='quantitative' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[EPA]' derivation='None' name='[none:EPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[EPA]' derivation='Sum' name='[sum:EPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PressureOnPlay]' derivation='Sum' name='[sum:PressureOnPlay:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:EPA:qk]' included-values='in-range'>
            <min>0.0</min>
            <max>6.7941260000000003</max>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EPA:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] * ([federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk] + [federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]))</rows>
        <cols>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
      </table>
      <simple-id uuid='{436B78D4-2A0F-47D5-8285-50BD5221C058}' />
    </worksheet>
    <worksheet name='TFL DE'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>TFL by Position (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Assisted Tackle' datatype='integer' name='[AssistedTackle]' role='measure' type='quantitative' />
            <column caption='Total Tackles' datatype='integer' name='[Calculation_350154876225814532]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[AssistedTackle]+[SoloTackle]' />
            </column>
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Offensive Yardage' datatype='integer' name='[OffensiveYardage]' role='measure' type='quantitative' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Solo Tackle' datatype='integer' name='[SoloTackle]' role='measure' type='quantitative' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[OffensiveYardage]' derivation='None' name='[none:OffensiveYardage:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_350154876225814532]' derivation='Sum' name='[sum:Calculation_350154876225814532:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Jordan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Carlos Dunlap&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeMarcus Lawrence&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jason Pierre-Paul&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Justin Houston&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maxx Crosby&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Bennett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Robert Quinn&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaq Lawson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Yannick Ngakoue&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:OffensiveYardage:qk]' included-values='in-range'>
            <max>-1</max>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' included-values='in-range'>
            <min>1</min>
            <max>16</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:OffensiveYardage:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' palette='red_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{73DD4AEE-F467-4C5D-BD58-929110A0060C}' />
    </worksheet>
    <worksheet name='TFL DT'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>TFL by Position (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Assisted Tackle' datatype='integer' name='[AssistedTackle]' role='measure' type='quantitative' />
            <column caption='Total Tackles' datatype='integer' name='[Calculation_350154876225814532]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[AssistedTackle]+[SoloTackle]' />
            </column>
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Offensive Yardage' datatype='integer' name='[OffensiveYardage]' role='measure' type='quantitative' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Solo Tackle' datatype='integer' name='[SoloTackle]' role='measure' type='quantitative' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[OffensiveYardage]' derivation='None' name='[none:OffensiveYardage:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_350154876225814532]' derivation='Sum' name='[sum:Calculation_350154876225814532:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Aaron Donald&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chris Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Grady Jarrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Phillips&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Larry Ogunjobi&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shelby Harris&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Steve McLendon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Taven Bryan&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:OffensiveYardage:qk]' included-values='in-range'>
            <max>-1</max>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' included-values='in-range'>
            <min>1</min>
            <max>16</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:OffensiveYardage:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' palette='red_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{FBF8CBA0-45DE-443E-A406-C5495CD091E9}' />
    </worksheet>
    <worksheet name='TFL LB'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>TFL by Position (Weeks 9-17; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Assisted Tackle' datatype='integer' name='[AssistedTackle]' role='measure' type='quantitative' />
            <column caption='Total Tackles' datatype='integer' name='[Calculation_350154876225814532]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[AssistedTackle]+[SoloTackle]' />
            </column>
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Offensive Yardage' datatype='integer' name='[OffensiveYardage]' role='measure' type='quantitative' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Solo Tackle' datatype='integer' name='[SoloTackle]' role='measure' type='quantitative' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[OffensiveYardage]' derivation='None' name='[none:OffensiveYardage:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_350154876225814532]' derivation='Sum' name='[sum:Calculation_350154876225814532:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:OffensiveYardage:qk]' included-values='in-range'>
            <max>-1</max>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' included-values='in-range'>
            <min>1</min>
            <max>16</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:OffensiveYardage:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' palette='red_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{3450D077-7695-4F37-84C1-6901EF2578F0}' />
    </worksheet>
    <worksheet name='Tackles 3rd (2)'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>3rd Down Tackles</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Assisted Tackle' datatype='integer' name='[AssistedTackle]' role='measure' type='quantitative' />
            <column caption='Total Tackles' datatype='integer' name='[Calculation_350154876225814532]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[AssistedTackle]+[SoloTackle]' />
            </column>
            <column datatype='integer' name='[Down]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Quarter]' role='dimension' type='quantitative' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Solo Tackle' datatype='integer' name='[SoloTackle]' role='measure' type='quantitative' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[Down]' derivation='None' name='[none:Down:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Quarter]' derivation='None' name='[none:Quarter:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_350154876225814532]' derivation='Sum' name='[sum:Calculation_350154876225814532:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]'>
            <groupfilter function='member' level='[none:Down:ok]' member='3' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Aaron Donald&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Andrew Billings&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Anthony Barr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Arik Armstead&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Beau Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Brandon Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bruce Irvin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bud Dupree&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Heyward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Jordan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Carlos Dunlap&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chandler Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chris Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Corey Peters&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Danielle Hunter&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dante Fowler Jr.&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Davon Godchaux&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dean Lowry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ed Oliver&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Eli Ankou&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Fletcher Cox&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Frank Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Geno Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Grady Jarrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Henry Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ifeadi Odenigbo&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jabaal Sheard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jadeveon Clowney&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;James Burgess&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jarran Reed&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jason Pierre-Paul&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Javon Hargrave&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jaylon Ferguson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jeremiah Attaochu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jihad Ward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Joey Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;John Atkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jonathan Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Jenkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jordan Phillips&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Josh Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jurrell Casey&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Justin Houston&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Khalil Mack&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Leonard Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Lorenzo Alexander&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maliek Collins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Mario Addison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Markus Golden&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Matt Judon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maurice Hurst&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Maxx Crosby&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Melvin Ingram III&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Bennett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Michael Brockers&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Montez Sweat&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ndamukong Suh&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Nick Bosa&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Poona Ford&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Porter Gustin&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Preston Smith&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinnen Williams&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Quinton Jefferson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Robert Quinn&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Ryan Anderson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sam Hubbard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaquil Barrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shelby Harris&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sheldon Richardson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Stephen Weatherly&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Steve McLendon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;T.J. Watt&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tanoh Kpassagnon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tarell Basham&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Taven Bryan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Timmy Jernigan&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Trent Murphy&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyeler Davison&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyson Alualu&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Tyus Bowser&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vernon Butler&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vic Beasley Jr&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vince Biegel&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vinny Curry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vita Vea&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Yannick Ngakoue&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Za&apos;Darius Smith&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]' included-values='in-range'>
            <min>1</min>
            <max>5</max>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' />
              <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]'>
            <groupfilter from='&quot;0&quot;' function='range' level='[none:TechniqueName:nk]' to='&quot;Off Ball&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' included-values='in-range'>
            <min>1</min>
            <max>10</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] * [federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
      </table>
      <simple-id uuid='{F357A96E-7795-429F-A539-AE03993619A9}' />
    </worksheet>
    <worksheet name='Total Tackles DE'>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Assisted Tackle' datatype='integer' name='[AssistedTackle]' role='measure' type='quantitative' />
            <column caption='Total Tackles' datatype='integer' name='[Calculation_350154876225814532]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[AssistedTackle]+[SoloTackle]' />
            </column>
            <column caption='sum([Assisted Tackle]+[Solo Tackle])' datatype='integer' name='[Calculation_350154876588040264]' role='measure' type='quantitative' user:unnamed='Total Tackles DE'>
              <calculation class='tableau' formula='sum([AssistedTackle]+[SoloTackle])' />
            </column>
            <column caption='First Down' datatype='integer' name='[FirstDown]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Solo Tackle' datatype='integer' name='[SoloTackle]' role='measure' type='quantitative' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[FirstDown]' derivation='None' name='[none:FirstDown:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_350154876225814532]' derivation='Sum' name='[sum:Calculation_350154876225814532:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_350154876588040264]' derivation='User' name='[usr:Calculation_350154876588040264:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:FirstDown:qk]' included-values='in-range'>
            <min>0</min>
            <max>0</max>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Cameron Heyward&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Carlos Dunlap&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chris Wormley&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Clelin Ferrell&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeMarcus Lawrence&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Jonathan Allen&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Lawrence Guy&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Melvin Ingram III&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sam Hubbard&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Trey Flowers&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DE&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' included-values='in-range'>
            <min>1</min>
            <max>36</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:FirstDown:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' palette='purple_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
              <lod column='[federated.0fg5f9510yktd81eigu1o10xko06].[usr:Calculation_350154876588040264:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{1C45475A-9317-487E-B70D-4A39A3CA6953}' />
    </worksheet>
    <worksheet name='Total Tackles DT'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Total Tackles Short of 1st Down by Position (Weeks 9-17 ; 2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Assisted Tackle' datatype='integer' name='[AssistedTackle]' role='measure' type='quantitative' />
            <column caption='Total Tackles' datatype='integer' name='[Calculation_350154876225814532]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[AssistedTackle]+[SoloTackle]' />
            </column>
            <column caption='First Down' datatype='integer' name='[FirstDown]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Solo Tackle' datatype='integer' name='[SoloTackle]' role='measure' type='quantitative' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[FirstDown]' derivation='None' name='[none:FirstDown:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_350154876225814532]' derivation='Sum' name='[sum:Calculation_350154876225814532:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:FirstDown:qk]' included-values='in-range'>
            <min>0</min>
            <max>0</max>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Christian Wilkins&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Dalvin Tomlinson&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Danny Shelton&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Davon Godchaux&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;DeForest Buckner&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Javon Hargrave&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kenny Clark&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Larry Ogunjobi&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Mike Purcell&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Sheldon Richardson&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;DT&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' included-values='in-range'>
            <min>1</min>
            <max>36</max>
          </filter>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:FirstDown:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' palette='purple_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{DD499A7F-877F-4851-8671-9C78ED4CE099}' />
    </worksheet>
    <worksheet name='Total Tackles LB'>
      <table>
        <view>
          <datasources>
            <datasource caption='AnalyticsChallenge2020Data' name='federated.0fg5f9510yktd81eigu1o10xko06' />
          </datasources>
          <datasource-dependencies datasource='federated.0fg5f9510yktd81eigu1o10xko06'>
            <column caption='Assisted Tackle' datatype='integer' name='[AssistedTackle]' role='measure' type='quantitative' />
            <column caption='Total Tackles' datatype='integer' name='[Calculation_350154876225814532]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[AssistedTackle]+[SoloTackle]' />
            </column>
            <column caption='First Down' datatype='integer' name='[FirstDown]' role='measure' type='quantitative' />
            <column datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column caption='Roster Position' datatype='string' name='[RosterPosition]' role='dimension' type='nominal' />
            <column caption='Solo Tackle' datatype='integer' name='[SoloTackle]' role='measure' type='quantitative' />
            <column caption='Technique Name' datatype='string' name='[TechniqueName]' role='dimension' type='nominal' />
            <column-instance column='[FirstDown]' derivation='None' name='[none:FirstDown:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[RosterPosition]' derivation='None' name='[none:RosterPosition:nk]' pivot='key' type='nominal' />
            <column-instance column='[TechniqueName]' derivation='None' name='[none:TechniqueName:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_350154876225814532]' derivation='Sum' name='[sum:Calculation_350154876225814532:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:FirstDown:qk]' included-values='in-range'>
            <min>0</min>
            <max>0</max>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Bud Dupree&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Chandler Jones&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Harold Landry&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Kyle Van Noy&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Markus Golden&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Matt Judon&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Shaquil Barrett&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;T.J. Watt&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Vince Biegel&quot;' />
              <groupfilter function='member' level='[none:Name:nk]' member='&quot;Za&apos;Darius Smith&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]'>
            <groupfilter function='member' level='[none:RosterPosition:nk]' member='&quot;LB&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' included-values='in-range'>
            <min>1</min>
            <max>36</max>
          </filter>
          <slices>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:FirstDown:qk]</column>
            <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' palette='purple_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
              <text column='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk] / [federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk])</rows>
        <cols total='true'>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</cols>
        <subtotals>
          <column>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{D7A84D5A-2035-41B1-90B0-D82F43E8310B}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' maximized='true' name='Sacks'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card AVG='true' KURTOSIS='false' MAX='true' MEDIAN='true' MIN='true' QUART1='false' QUART3='false' SKEWNESS='false' STDEV='false' SUM='true' type='summary' />
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:SoloSack:vtsum:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[:Measure Names]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Down:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:PlayerId:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:SoloSack:vtsum:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{700ACD59-F2BF-4ADF-9FD8-5B884C51DA4C}' />
    </window>
    <window class='worksheet' name='QB Fumbles'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventType:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{686609CA-D0BA-44B2-8FBA-DC618FAD41B1}' />
    </window>
    <window class='worksheet' name='QB Fumbles (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventType:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0E43F28F-CD0D-4CB3-9F0C-007FD80FE5E4}' />
    </window>
    <window class='worksheet' name='QB Fumbles (3)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByPasser:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventType:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{92326DE6-7401-40A1-857C-F13F83970E7E}' />
    </window>
    <window class='worksheet' name='Forced Fumbles'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventID:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventType:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:GameID:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:OnFieldPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:PlayDesc:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6B86EE75-D7A4-4A6A-A2B8-AE722CB151AA}' />
    </window>
    <window class='worksheet' name='Forced Fumbles (2)'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventID:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventType:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:GameID:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:OnFieldPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:PlayDesc:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8E49DF4C-9005-45B1-9DF3-50A0A35DE06F}' />
    </window>
    <window class='worksheet' name='Forced Fumbles (3)'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:FumbleByRusher:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventID:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventType:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:GameID:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:OnFieldPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:PlayDesc:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F74F6EBC-AF60-4CC4-96A4-A86F1581C427}' />
    </window>
    <window class='worksheet' name='TFL LB'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:OffensiveYardage:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:PlayDesc:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B7AA721C-8BC2-438B-823E-5AAA5AA4837E}' />
    </window>
    <window class='worksheet' name='TFL DE'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:OffensiveYardage:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:PlayDesc:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F12E7493-FBDB-41A4-948C-F8E64E6E62B8}' />
    </window>
    <window class='worksheet' name='TFL DT'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:OffensiveYardage:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:PlayDesc:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2F35A81A-E3EF-4974-8D4D-F716EA04660B}' />
    </window>
    <window class='worksheet' name='Total Tackles DE'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876223979521:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876276498443:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876276563980:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventID:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C53ACF73-8944-4A33-B989-549F68C155D8}' />
    </window>
    <window class='worksheet' name='Total Tackles DT'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876223979521:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876587016258:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876588228681:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EventID:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B88B4AF0-5499-4BA6-A664-1151C435BCEB}' />
    </window>
    <window class='worksheet' name='Total Tackles LB'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876223979521:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:Calculation_350154876225814532:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2B11247E-B746-4F73-A38C-61F8F1CAD1A8}' />
    </window>
    <window class='worksheet' name='Pressures'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:OnFieldPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C46307D3-7556-4B10-B664-D9A531880167}' />
    </window>
    <window class='worksheet' name='Pressures DE'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:OnFieldPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9F299D66-DE35-4628-936B-013801F6BE47}' />
    </window>
    <window class='worksheet' name='Pressures LB (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:OnFieldPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F8651582-0373-4204-BC50-50DDF8402148}' />
    </window>
    <window class='worksheet' name='EPA 1st down'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[:Measure Names]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:vtsum:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313276473:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313403450:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313448507:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313473084:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313501757:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EPA:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{56429ADB-2155-4FDA-8B64-A20E8FBB9966}' />
    </window>
    <window class='worksheet' name='EPA'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[:Measure Names]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:vtsum:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313276473:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313403450:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313448507:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313473084:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313501757:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EPA:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5BD83BB4-1697-4236-97E0-60C4BCD6AE89}' />
    </window>
    <window class='worksheet' name='EPA 3rd Down'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[:Measure Names]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:vtsum:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313276473:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313403450:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313448507:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313473084:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313501757:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EPA:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E209577C-99BB-4DC4-A869-DC2DACDED3FC}' />
    </window>
    <window class='worksheet' name='EPA 4th Down'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[:Measure Names]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:vtsum:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313276473:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313403450:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313448507:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313473084:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313501757:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EPA:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F7C83F5B-AE29-4D74-82D7-2875494CF859}' />
    </window>
    <window class='worksheet' name='EPA &lt;5min'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[:Measure Names]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[min:EPA:vtsum:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313276473:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313403450:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313448507:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313473084:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313501757:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EPA:ok]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TimeLeft:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{81F5FF08-D028-42E9-8FE6-9DEE62DC7A91}' />
    </window>
    <window class='worksheet' name='Pressures 3rd'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[:Measure Names]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313276473:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313403450:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313448507:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313473084:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313501757:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{568C2A33-E522-4CFE-8583-0EA1C16897FE}' />
    </window>
    <window class='worksheet' name='Sacks 3rd '>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[:Measure Names]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313276473:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313403450:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313448507:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313473084:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313501757:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1CAA07A7-2933-4020-8701-F16C7AC7C133}' />
    </window>
    <window class='worksheet' name='Tackles 3rd (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[:Measure Names]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313276473:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313403450:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313448507:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313473084:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876313501757:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Calculation_350154876319785024:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Quarter:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9A97CEE2-B971-477E-B57D-DCD7FAB4C652}' />
    </window>
    <window class='worksheet' name='Sheet 14 (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fg5f9510yktd81eigu1o10xko06].[sum:EPA:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:Name:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{44C49C54-694C-43E6-B9EF-E27883D8978C}' />
    </window>
    <window class='worksheet' name='Sheet 16'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[:Measure Names]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:EPA:qk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:RosterPosition:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[none:TechniqueName:nk]</field>
            <field>[federated.0fg5f9510yktd81eigu1o10xko06].[sum:PressureOnPlay:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7FDF3B0B-09FD-48AA-BE9D-5CAB7978856D}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='EPA' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='EPA 1st down' width='192'>
      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
      K6IAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='EPA 3rd Down' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='EPA 4th Down' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='EPA &lt;5min' width='192'>
      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
      fxH4/wGz8BDdrDf92AAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Forced Fumbles' width='192'>
      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
      K0yH/v8B7PY8oAgW8RoAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Forced Fumbles (2)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Forced Fumbles (3)' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Pressures' width='192'>
      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
      1tov/96yEAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Pressures 3rd' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Pressures DE' width='192'>
      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
      Ylhi7CdEUSAAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Pressures LB (2)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='QB Fumbles' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='QB Fumbles (2)' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='QB Fumbles (3)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sacks' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sacks 3rd ' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 14 (2)' width='192'>
      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
      7f8ADxXbspcHvlcAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 16' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='TFL DE' width='192'>
      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
      HjVJEQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='TFL DT' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='TFL LB' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Tackles 3rd (2)' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Total Tackles DE' width='192'>
      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
      QmCC
    </thumbnail>
    <thumbnail height='192' name='Total Tackles DT' width='192'>
      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
      A688BL0Q0O6mAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Total Tackles LB' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
